/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package com.raket.silverstripe;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.raket.silverstripe.psi.SilverStripeTypes;
import com.raket.silverstripe.psi.SilverStripeTokenType;
import com.intellij.psi.TokenType;
import com.intellij.psi.*;
import com.intellij.psi.xml.*;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.util.containers.Stack;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>SilverStripe.flex</tt>
 */
public class SilverStripeLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int SS_VAR = 2;
  public static final int SS_BLOCK_START = 4;
  public static final int SS_BLOCK_VAR = 6;
  public static final int SS_BAD_BLOCK_STATEMENT = 8;
  public static final int SS_COMMENT = 10;
  public static final int SS_TRANSLATION = 12;
  public static final int SS_IF_STATEMENT = 14;
  public static final int SS_INCLUDE_STATEMENT = 16;
  public static final int SS_REQUIRE_STATEMENT = 18;
  public static final int SS_METHOD_ARGUMENTS = 20;
  public static final int SS_CACHED_STATEMENT = 22;
  public static final int SS_INCLUDE_VARS = 24;
  public static final int SS_STRING = 26;
  public static final int SS_DOUBLE = 28;
  public static final int SS_SINGLE = 30;
  public static final int SS_REQUIRE_CONTENT = 32;
  public static final int SS_IDENTIFIER = 34;
  public static final int SS_THEME_STRING = 36;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\1\1\53\1\54\1\2\22\0\1\3\1\41\1\15"+
    "\1\0\1\11\1\21\1\42\1\14\1\5\1\6\2\0\1\4\1\51"+
    "\1\7\1\0\12\10\2\0\1\20\1\40\1\22\2\0\2\13\1\56"+
    "\1\63\16\13\1\57\1\62\6\13\4\0\1\12\1\0\1\45\1\44"+
    "\1\32\1\50\1\36\1\35\1\46\1\31\1\27\1\60\1\13\1\23"+
    "\1\55\1\33\1\24\1\25\1\52\1\34\1\37\1\30\1\47\1\61"+
    "\1\26\3\13\1\16\1\43\1\17\7\0\1\53\u1fa2\0\1\53\1\53"+
    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final int ZZ_SX = 0x0700;
  private static final int ZZ_MX = 0x10000;
  private static final int ZZ_LX = 0x110000;
  private static char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED, ZZ_SX);
  private static class M { static final char [] MAP = zzUnpackCMap(ZZ_CMAP_PACKED, ZZ_MX); }
  private static class L { static final char [] MAP = zzUnpackCMap(ZZ_CMAP_PACKED, ZZ_LX); }

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\4\0\1\2\10\0\3\3\1\0\1\4\3\1"+
    "\1\5\2\6\1\5\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\5\1\15\13\16\2\17\1\20\2\17\2\6"+
    "\1\15\1\17\1\0\1\2\1\20\1\21\1\22\2\23"+
    "\1\24\1\17\1\25\2\17\1\20\2\17\1\26\1\27"+
    "\3\5\1\30\1\31\3\5\1\3\1\32\1\33\1\3"+
    "\1\34\1\3\1\35\1\4\1\36\1\12\1\37\1\40"+
    "\1\41\3\0\1\42\10\0\1\43\1\2\1\0\1\40"+
    "\1\23\1\0\1\3\1\0\1\20\1\44\3\0\1\12"+
    "\1\45\13\0\1\2\1\46\1\23\1\0\1\47\1\0"+
    "\1\12\1\50\1\51\4\0\1\52\2\0\1\53\1\54"+
    "\2\0\1\12\14\0\1\12\2\0\1\55\4\0\1\56"+
    "\5\0\1\12\1\57\1\60\1\61\7\0\1\12\2\0"+
    "\1\62\2\0\1\63\2\0\1\64\2\0\1\65";

  private static int [] zzUnpackAction() {
    int [] result = new int[201];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\320\0\u0104\0\u0138\0\u016c"+
    "\0\u01a0\0\u01d4\0\u0208\0\u023c\0\u0270\0\u02a4\0\u02d8\0\u030c"+
    "\0\u0340\0\u0374\0\u03a8\0\u03dc\0\u0410\0\u0444\0\u0478\0\u0478"+
    "\0\u04ac\0\u04e0\0\u0478\0\u0478\0\u0514\0\u0548\0\u0478\0\u0478"+
    "\0\u057c\0\u04e0\0\u0478\0\u05b0\0\u05e4\0\u0618\0\u064c\0\u0680"+
    "\0\u06b4\0\u06e8\0\u071c\0\u0750\0\u0784\0\u0478\0\u07b8\0\u07ec"+
    "\0\u057c\0\u0820\0\u0820\0\u0854\0\u0888\0\u08bc\0\u0820\0\u08f0"+
    "\0\u0924\0\u0478\0\u0478\0\u0958\0\u098c\0\u0924\0\u098c\0\u09c0"+
    "\0\u09f4\0\u0a28\0\u0a5c\0\u0a90\0\u0ac4\0\u0af8\0\u0478\0\u0b2c"+
    "\0\u0b60\0\u0b94\0\u0478\0\u0478\0\u0bc8\0\u09f4\0\u0a28\0\u0bfc"+
    "\0\u0478\0\u0478\0\u0c30\0\u0478\0\u0c64\0\u0c98\0\u0ccc\0\u0478"+
    "\0\u0d00\0\u0478\0\u0d34\0\u0478\0\u0d68\0\u0d9c\0\u0dd0\0\u0478"+
    "\0\u0e04\0\u0e38\0\u0e6c\0\u0ea0\0\u0ed4\0\u0f08\0\u0f3c\0\u08bc"+
    "\0\u0478\0\u0f70\0\u0fa4\0\u0478\0\u0478\0\u09f4\0\u0478\0\u0a28"+
    "\0\u0fd8\0\u0478\0\u100c\0\u1040\0\u1074\0\u10a8\0\u0478\0\u10dc"+
    "\0\u1110\0\u1144\0\u1178\0\u11ac\0\u11e0\0\u1214\0\u1248\0\u127c"+
    "\0\u12b0\0\u12e4\0\u1318\0\u0fa4\0\u07ec\0\u134c\0\u0478\0\u1380"+
    "\0\u13b4\0\u0478\0\u0478\0\u13e8\0\u141c\0\u1450\0\u1484\0\u14b8"+
    "\0\u14ec\0\u1520\0\u0478\0\u0478\0\u1554\0\u1588\0\u15bc\0\u15f0"+
    "\0\u1624\0\u1658\0\u168c\0\u16c0\0\u16f4\0\u1728\0\u175c\0\u1790"+
    "\0\u17c4\0\u17f8\0\u182c\0\u1860\0\u1894\0\u18c8\0\u0478\0\u18fc"+
    "\0\u1930\0\u1964\0\u1998\0\u0478\0\u19cc\0\u1a00\0\u1a34\0\u1a68"+
    "\0\u1a9c\0\u1ad0\0\u0478\0\u0478\0\u0478\0\u1b04\0\u1b38\0\u1b6c"+
    "\0\u1ba0\0\u1bd4\0\u1c08\0\u1c3c\0\u1c70\0\u1ca4\0\u1cd8\0\u0478"+
    "\0\u1d0c\0\u1d40\0\u0548\0\u1d74\0\u1da8\0\u0478\0\u1ddc\0\u1e10"+
    "\0\u0478";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[201];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\11\1\1\24\4\1\1\25\1\1\1\26\43\1\1\27"+
    "\1\30\1\31\1\32\1\27\1\33\1\27\1\34\1\27"+
    "\1\35\2\36\2\27\1\37\1\40\1\27\1\41\1\27"+
    "\15\36\4\27\5\36\1\27\1\36\1\0\1\42\7\36"+
    "\1\43\1\30\1\31\1\42\14\43\1\44\1\45\1\43"+
    "\1\46\2\43\1\47\1\50\2\43\1\51\1\43\1\52"+
    "\1\43\1\53\5\43\1\54\4\43\1\55\1\43\1\0"+
    "\1\42\7\43\1\56\1\30\1\31\1\42\5\56\1\57"+
    "\2\60\5\56\1\61\1\56\15\60\4\56\5\60\1\56"+
    "\1\60\1\0\1\42\7\60\1\62\1\63\1\64\1\65"+
    "\15\62\1\66\31\62\1\67\1\65\7\62\51\6\1\70"+
    "\12\6\1\56\1\30\1\31\1\42\5\56\1\57\2\71"+
    "\1\72\1\73\2\56\1\74\1\61\1\75\5\71\1\76"+
    "\7\71\1\75\1\77\2\56\5\71\1\56\1\71\1\0"+
    "\1\42\7\71\1\56\1\30\1\31\1\42\4\56\1\100"+
    "\1\57\2\60\1\101\1\102\2\56\1\75\1\61\1\75"+
    "\10\60\1\103\4\60\1\75\1\77\1\104\1\105\5\60"+
    "\1\56\1\60\1\0\1\42\7\60\1\27\1\30\1\31"+
    "\1\42\6\27\2\106\7\27\15\106\4\27\7\106\1\0"+
    "\1\42\7\106\1\27\1\30\1\31\1\42\1\27\1\107"+
    "\22\27\1\110\1\27\1\111\20\27\1\0\1\42\3\27"+
    "\1\112\4\27\1\30\1\31\1\42\1\113\1\27\1\114"+
    "\1\34\1\100\1\115\2\36\1\116\1\117\5\27\15\36"+
    "\4\27\5\36\1\27\1\36\1\0\1\42\7\36\1\56"+
    "\1\30\1\31\1\42\1\113\4\56\1\57\2\60\1\101"+
    "\1\102\3\56\1\61\1\56\15\60\4\56\5\60\1\56"+
    "\1\60\1\0\1\42\7\60\1\56\1\30\1\31\1\42"+
    "\1\113\4\56\1\57\2\60\4\56\1\75\1\61\1\75"+
    "\15\60\1\75\1\77\2\56\5\60\1\56\1\60\1\0"+
    "\1\42\7\60\1\56\1\30\1\31\1\42\47\56\1\0"+
    "\1\42\7\56\15\120\1\121\1\122\45\120\14\123\1\124"+
    "\1\123\1\122\45\123\6\125\1\114\5\125\1\72\1\73"+
    "\46\125\1\27\1\30\1\31\1\32\6\27\2\126\7\27"+
    "\15\126\4\27\5\126\1\27\1\126\1\0\1\42\7\126"+
    "\6\127\1\27\5\127\2\27\46\127\11\1\1\24\1\1"+
    "\1\0\2\1\1\25\1\1\1\26\2\1\15\0\4\1"+
    "\5\0\1\1\1\0\2\1\7\0\11\1\1\0\4\1"+
    "\1\25\1\1\1\26\54\1\1\24\4\1\1\25\1\1"+
    "\1\26\1\130\42\1\65\0\1\30\65\0\1\42\50\0"+
    "\1\42\21\0\2\36\7\0\15\36\4\0\5\36\1\0"+
    "\1\36\2\0\5\36\1\131\1\36\10\0\1\36\1\0"+
    "\2\36\7\0\15\36\4\0\5\36\1\0\1\36\2\0"+
    "\7\36\22\0\1\132\62\0\1\133\64\0\1\134\65\0"+
    "\1\135\66\0\1\136\67\0\1\137\1\0\1\140\52\0"+
    "\1\141\20\0\1\142\54\0\1\143\50\0\1\144\7\0"+
    "\1\145\75\0\1\146\67\0\1\147\24\0\2\60\7\0"+
    "\15\60\4\0\5\60\1\0\1\60\2\0\7\60\10\0"+
    "\1\60\1\0\2\60\7\0\15\60\4\0\5\60\1\0"+
    "\1\60\2\0\7\60\21\67\1\150\43\67\1\63\17\67"+
    "\1\150\45\67\1\65\15\67\1\150\32\67\1\65\30\67"+
    "\1\150\1\151\41\67\51\6\1\152\12\6\7\0\1\153"+
    "\1\60\1\0\2\71\7\0\15\71\4\0\5\71\1\0"+
    "\1\71\2\0\7\71\21\0\1\154\16\0\1\155\63\0"+
    "\1\155\33\0\1\100\53\0\14\156\1\157\47\156\15\160"+
    "\1\157\46\160\10\0\1\60\1\0\2\60\7\0\1\60"+
    "\1\161\13\60\4\0\5\60\1\0\1\60\2\0\7\60"+
    "\42\0\1\162\64\0\1\162\32\0\2\106\7\0\15\106"+
    "\4\0\7\106\2\0\7\106\31\0\1\163\71\0\1\164"+
    "\71\0\1\165\30\0\2\36\7\0\15\36\4\0\5\36"+
    "\1\0\1\36\2\0\7\36\15\120\2\0\45\120\14\123"+
    "\1\0\1\123\1\0\45\123\6\125\1\0\5\125\2\0"+
    "\46\125\10\0\1\126\1\0\2\126\7\0\15\126\4\0"+
    "\5\126\1\0\1\126\2\0\7\126\6\127\1\0\5\127"+
    "\2\0\46\127\10\0\1\36\1\0\2\36\7\0\6\36"+
    "\1\166\6\36\4\0\5\36\1\0\1\36\2\0\7\36"+
    "\30\0\1\167\20\0\1\170\36\0\1\171\67\0\1\172"+
    "\65\0\1\173\64\0\1\174\62\0\1\175\103\0\1\176"+
    "\50\0\1\177\74\0\1\200\52\0\1\201\45\0\1\202"+
    "\42\0\21\6\1\203\27\6\1\152\12\6\12\0\2\204"+
    "\7\0\15\204\4\0\5\204\1\0\1\204\2\0\7\204"+
    "\10\0\1\60\1\0\2\60\7\0\5\60\1\205\7\60"+
    "\4\0\5\60\1\0\1\60\2\0\7\60\36\0\1\206"+
    "\64\0\1\207\105\0\1\210\12\0\1\36\1\0\2\36"+
    "\7\0\13\36\1\211\1\36\4\0\5\36\1\0\1\36"+
    "\2\0\7\36\51\0\1\212\37\0\1\213\67\0\1\213"+
    "\55\0\1\214\70\0\1\215\64\0\1\216\101\0\1\217"+
    "\52\0\1\220\37\0\1\221\107\0\1\222\47\0\1\223"+
    "\41\0\22\6\1\224\26\6\1\70\12\6\55\0\1\225"+
    "\53\0\1\226\26\0\1\36\1\0\2\36\7\0\15\36"+
    "\4\0\5\36\1\0\1\36\2\0\1\227\6\36\47\0"+
    "\1\230\50\0\1\231\65\0\1\232\54\0\1\233\46\0"+
    "\1\234\74\0\1\235\2\0\1\236\1\237\2\0\1\240"+
    "\43\0\1\241\107\0\1\242\64\0\1\243\34\0\1\36"+
    "\1\0\2\36\7\0\13\36\1\244\1\36\4\0\5\36"+
    "\1\0\1\36\2\0\7\36\50\0\1\245\37\0\1\246"+
    "\107\0\1\247\47\0\1\250\56\0\1\251\60\0\1\252"+
    "\66\0\1\253\71\0\1\254\52\0\1\255\20\0\1\256"+
    "\46\0\1\257\103\0\1\260\45\0\1\261\41\0\1\36"+
    "\1\0\2\36\7\0\15\36\4\0\5\36\1\0\1\36"+
    "\2\0\6\36\1\262\36\0\1\263\50\0\1\213\76\0"+
    "\1\264\62\0\1\265\52\0\1\266\67\0\1\267\66\0"+
    "\1\270\62\0\1\271\76\0\1\272\74\0\1\273\41\0"+
    "\1\274\37\0\1\36\1\0\2\36\7\0\4\36\1\275"+
    "\10\36\4\0\5\36\1\0\1\36\2\0\7\36\25\0"+
    "\1\254\67\0\1\254\62\0\1\276\64\0\1\277\100\0"+
    "\1\300\74\0\1\301\33\0\1\302\44\0\1\36\1\0"+
    "\2\36\7\0\11\36\1\303\3\36\4\0\5\36\1\0"+
    "\1\36\2\0\7\36\34\0\1\304\65\0\1\305\104\0"+
    "\1\306\31\0\1\307\62\0\1\310\107\0\1\254\43\0"+
    "\1\311\56\0\1\254\40\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7748];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\4\0\1\1\10\0\3\1\1\0\4\1\2\11"+
    "\2\1\2\11\2\1\2\11\2\1\1\11\12\1\1\11"+
    "\10\1\1\0\2\1\2\11\13\1\1\11\3\1\2\11"+
    "\4\1\2\11\1\1\1\11\3\1\1\11\1\1\1\11"+
    "\1\1\1\11\3\0\1\11\10\0\1\11\1\1\1\0"+
    "\2\11\1\0\1\11\1\0\1\1\1\11\3\0\1\1"+
    "\1\11\13\0\3\1\1\0\1\11\1\0\1\1\2\11"+
    "\4\0\1\1\2\0\2\11\2\0\1\1\14\0\1\1"+
    "\2\0\1\11\4\0\1\11\5\0\1\1\3\11\7\0"+
    "\1\1\2\0\1\11\2\0\1\1\2\0\1\11\2\0"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[201];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private Stack<Integer> stack = new Stack<Integer>();

    public void yypushstate(int newState) {
      stack.push(yystate());
      yybegin(newState);
    }

    public void yypopstate() {
      yybegin(stack.pop());
    }

    public void yycleanstates() {
       while(!stack.isEmpty()) {
          yybegin(stack.pop());
       }
    }

	public IElementType checkContent() {
        if (!yytext().toString().equals("")) {
           if (yytext().toString().trim().length() == 0) {
               return TokenType.WHITE_SPACE;
           } else {
               return SilverStripeTypes.CONTENT;
           }
        }
    	return null;
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public SilverStripeLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed, int limit) {
    char [] map = new char[limit];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 174 && j < limit) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0 && j < limit);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          if (zzInput >= zzCMapL.length) ZZ_CMAP = zzCMapL = zzInput >= ZZ_MX ? L.MAP : M.MAP;
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { if (yylength() > 0 && yytext().subSequence(yylength() - 1, yylength()).toString().equals("$") ||
            yylength() > 0 && yytext().subSequence(yylength() - 1, yylength()).toString().equals("{") ) {
            yypushback(1);
            yypushstate(SS_VAR);
        }

        // we stray from the Handlebars grammar a bit here since we need our WHITE_SPACE more clearly delineated
        //    and we need to avoid creating extra tokens for empty strings (makes the parser and formatter happier)
        if (!yytext().toString().equals("")) {
           if (yytext().toString().trim().length() == 0) {
               return TokenType.WHITE_SPACE;
           } else {
               return SilverStripeTypes.CONTENT;
           }
        }
            }
          case 54: break;
          case 2: 
            { return SilverStripeTypes.COMMENT;
            }
          case 55: break;
          case 3: 
            { return SilverStripeTypes.SS_STRING;
            }
          case 56: break;
          case 4: 
            { yypopstate(); return SilverStripeTypes.SS_STRING;
            }
          case 57: break;
          case 5: 
            { yypopstate(); yypushback(yylength());
            }
          case 58: break;
          case 6: 
            { if (!stack.isEmpty()) {
		   yypopstate(); yypushback(yylength());
		} else {
		return SilverStripeTypes.CRLF;
	}
            }
          case 59: break;
          case 7: 
            { yypushstate(SS_METHOD_ARGUMENTS); return SilverStripeTypes.LEFT_PAREN;
            }
          case 60: break;
          case 8: 
            { yypushstate(SS_IDENTIFIER); return SilverStripeTypes.DOT;
            }
          case 61: break;
          case 9: 
            { return SilverStripeTypes.SS_VAR_START;
            }
          case 62: break;
          case 10: 
            { return SilverStripeTypes.SS_VAR;
            }
          case 63: break;
          case 11: 
            { return SilverStripeTypes.SS_VAR_START_DELIMITER;
            }
          case 64: break;
          case 12: 
            { yypopstate(); return SilverStripeTypes.SS_VAR_END_DELIMITER;
            }
          case 65: break;
          case 13: 
            { return TokenType.WHITE_SPACE;
            }
          case 66: break;
          case 14: 
            { yypushstate(SS_BAD_BLOCK_STATEMENT); yypushback(yylength());
            }
          case 67: break;
          case 15: 
            { return TokenType.BAD_CHARACTER;
/*	if (!stack.isEmpty()) {
	   yypopstate(); yypushback(yylength());
	} else {
		return TokenType.BAD_CHARACTER;
	}*/
            }
          case 68: break;
          case 16: 
            { yypushstate(SS_VAR); return SilverStripeTypes.SS_VAR;
            }
          case 69: break;
          case 17: 
            { yypushstate(SS_SINGLE); return SilverStripeTypes.SS_SINGLE_LEFT;
            }
          case 70: break;
          case 18: 
            { yypushstate(SS_DOUBLE); return SilverStripeTypes.SS_DOUBLE_LEFT;
            }
          case 71: break;
          case 19: 
            { return SilverStripeTypes.SS_COMPARISON_OPERATOR;
            }
          case 72: break;
          case 20: 
            { return SilverStripeTypes.SS_TRANSLATION_KEYWORD;
            }
          case 73: break;
          case 21: 
            { return SilverStripeTypes.NUMBER;
            }
          case 74: break;
          case 22: 
            { yypushstate(SS_INCLUDE_VARS); return SilverStripeTypes.SS_INCLUDE_FILE;
            }
          case 75: break;
          case 23: 
            { yypushstate(SS_REQUIRE_CONTENT); return SilverStripeTypes.LEFT_PAREN;
            }
          case 76: break;
          case 24: 
            { return SilverStripeTypes.COMMA;
            }
          case 77: break;
          case 25: 
            { yypopstate(); return SilverStripeTypes.RIGHT_PAREN;
            }
          case 78: break;
          case 26: 
            { yypopstate(); return SilverStripeTypes.SS_DOUBLE_RIGHT;
            }
          case 79: break;
          case 27: 
            { yypushstate(SS_VAR); return SilverStripeTypes.SS_VAR_START_DELIMITER;
            }
          case 80: break;
          case 28: 
            { yypopstate(); return SilverStripeTypes.SS_SINGLE_RIGHT;
            }
          case 81: break;
          case 29: 
            { yypopstate(); return SilverStripeTypes.SS_IDENTIFIER;
            }
          case 82: break;
          case 30: 
            { yypushback(2);
            yypushstate(SS_BLOCK_START);
            IElementType content = checkContent();
            if (content != null) return content;
            }
          case 83: break;
          case 31: 
            { yycleanstates(); return SilverStripeTypes.SS_BLOCK_END;
            }
          case 84: break;
          case 32: 
            { return SilverStripeTypes.SS_BLOCK_START;
            }
          case 85: break;
          case 33: 
            { yypopstate(); return SilverStripeTypes.SS_BLOCK_END;
            }
          case 86: break;
          case 34: 
            { yypushstate(SS_IF_STATEMENT); return SilverStripeTypes.SS_IF_KEYWORD;
            }
          case 87: break;
          case 35: 
            { yypopstate(); yypushback(2); return SilverStripeTypes.SS_BAD_BLOCK_STATEMENT;
            }
          case 88: break;
          case 36: 
            { return SilverStripeTypes.SS_AND_OR_OPERATOR;
            }
          case 89: break;
          case 37: 
            { yypushstate(SS_TRANSLATION);  yypushback(3); return SilverStripeTypes.SS_BLOCK_START;
            }
          case 90: break;
          case 38: 
            { return SilverStripeTypes.SS_TRANSLATION_IDENTIFIER;
            }
          case 91: break;
          case 39: 
            { return SilverStripeTypes.SS_REQUIRE_CSS;
            }
          case 92: break;
          case 40: 
            { yypushstate(SS_COMMENT); return SilverStripeTypes.SS_COMMENT_START;
            }
          case 93: break;
          case 41: 
            { yypushstate(SS_BLOCK_VAR); return SilverStripeTypes.SS_START_KEYWORD;
            }
          case 94: break;
          case 42: 
            { return SilverStripeTypes.SS_ELSE_KEYWORD;
            }
          case 95: break;
          case 43: 
            { yypopstate(); return SilverStripeTypes.SS_COMMENT_END;
            }
          case 96: break;
          case 44: 
            { yypopstate(); yypushback(4); return SilverStripeTypes.COMMENT;
            }
          case 97: break;
          case 45: 
            { yypushstate(SS_CACHED_STATEMENT); return SilverStripeTypes.SS_CACHED_KEYWORD;
            }
          case 98: break;
          case 46: 
            { return SilverStripeTypes.SS_END_KEYWORD;
            }
          case 99: break;
          case 47: 
            { yypushstate(SS_INCLUDE_STATEMENT); return SilverStripeTypes.SS_INCLUDE_KEYWORD;
            }
          case 100: break;
          case 48: 
            { yypushstate(SS_REQUIRE_STATEMENT); return SilverStripeTypes.SS_REQUIRE_KEYWORD;
            }
          case 101: break;
          case 49: 
            { yypushstate(SS_IF_STATEMENT); return SilverStripeTypes.SS_ELSE_IF_KEYWORD;
            }
          case 102: break;
          case 50: 
            { yypushstate(SS_BLOCK_VAR); return SilverStripeTypes.SS_SIMPLE_KEYWORD;
            }
          case 103: break;
          case 51: 
            { if (stack.size() == 1) {
		yypushstate(SS_THEME_STRING); return SilverStripeTypes.SS_THEME_VAR;
	}
	else {
	   return SilverStripeTypes.SS_VAR;
	}
            }
          case 104: break;
          case 52: 
            { return SilverStripeTypes.SS_REQUIRE_THEME_CSS;
            }
          case 105: break;
          case 53: 
            { return SilverStripeTypes.SS_REQUIRE_JS;
            }
          case 106: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
