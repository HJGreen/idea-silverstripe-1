/* The following code was generated by JFlex 1.4.3 on 2013-04-09 23:41 */

package com.raket.silverstripe;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.raket.silverstripe.psi.SilverStripeTypes;
import com.raket.silverstripe.psi.SilverStripeTokenType;
import com.intellij.psi.TokenType;
import com.intellij.psi.*;
import com.intellij.psi.xml.*;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.util.containers.Stack;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 2013-04-09 23:41 from the specification file
 * <tt>C:/IdeaProjects/idea-silverstripe/src/com/raket/silverstripe/SilverStripe.flex</tt>
 */
public class SilverStripeLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int SS_VAR = 2;
  public static final int SS_INCLUDE_VARS = 24;
  public static final int SS_TRANSLATION = 12;
  public static final int SS_REQUIRE_CONTENT = 32;
  public static final int SS_SINGLE = 30;
  public static final int SS_DOUBLE = 28;
  public static final int SS_METHOD_ARGUMENTS = 20;
  public static final int SS_BLOCK_VAR = 6;
  public static final int SS_BLOCK_START = 4;
  public static final int SS_BAD_BLOCK_STATEMENT = 8;
  public static final int SS_CACHED_STATEMENT = 22;
  public static final int SS_INCLUDE_STATEMENT = 16;
  public static final int SS_REQUIRE_STATEMENT = 18;
  public static final int YYINITIAL = 0;
  public static final int SS_STRING = 26;
  public static final int SS_IF_STATEMENT = 14;
  public static final int SS_COMMENT = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\1\1\0\1\3\1\2\22\0\1\3\1\41\1\14"+
    "\1\0\1\11\1\20\1\42\1\13\1\5\1\6\2\0\1\4\1\51"+
    "\1\7\1\0\12\10\2\0\1\17\1\40\1\21\2\0\2\12\1\54"+
    "\17\12\1\55\7\12\4\0\1\37\1\0\1\45\1\44\1\31\1\50"+
    "\1\35\1\34\1\46\1\30\1\26\1\56\1\12\1\22\1\53\1\32"+
    "\1\23\1\24\1\52\1\33\1\36\1\27\1\47\1\57\1\25\3\12"+
    "\1\15\1\43\1\16\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\15\0\3\2\3\1\1\3\1\4\2\3\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\3\2\13\1\14"+
    "\12\13\1\15\1\4\1\15\1\16\2\15\2\4\1\14"+
    "\2\15\2\4\1\14\1\15\1\16\1\17\1\20\1\15"+
    "\1\21\1\22\1\15\1\23\2\15\1\16\2\15\1\24"+
    "\1\25\3\3\1\26\1\27\3\3\1\2\1\30\1\31"+
    "\1\2\1\32\1\2\1\33\1\34\1\35\1\36\3\0"+
    "\1\37\11\0\1\40\4\0\1\35\1\22\1\0\1\2"+
    "\1\0\1\16\1\41\3\0\1\42\14\0\1\43\1\22"+
    "\1\0\1\44\1\0\1\45\1\46\4\0\1\47\2\0"+
    "\1\50\1\51\20\0\1\52\4\0\1\53\5\0\1\54"+
    "\1\55\1\56\11\0\1\57\4\0\1\60\2\0\1\61";

  private static int [] zzUnpackAction() {
    int [] result = new int[197];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\300\0\360\0\u0120\0\u0150"+
    "\0\u0180\0\u01b0\0\u01e0\0\u0210\0\u0240\0\u0270\0\u02a0\0\u02d0"+
    "\0\u0300\0\u0330\0\u0360\0\u0390\0\u03c0\0\u03c0\0\u03f0\0\u0420"+
    "\0\u03c0\0\u03c0\0\u0450\0\u0480\0\u03c0\0\u03c0\0\u04b0\0\u03c0"+
    "\0\u03f0\0\u0420\0\u04e0\0\u0510\0\u0540\0\u0570\0\u05a0\0\u05d0"+
    "\0\u0600\0\u0630\0\u0660\0\u0690\0\u03c0\0\u03f0\0\u06c0\0\u06f0"+
    "\0\u04b0\0\u0720\0\u0720\0\u0750\0\u0780\0\u07b0\0\u07e0\0\u07e0"+
    "\0\u0810\0\u0840\0\u0870\0\u08a0\0\u03c0\0\u03c0\0\u08d0\0\u08a0"+
    "\0\u0900\0\u0900\0\u0930\0\u0960\0\u0990\0\u09c0\0\u09f0\0\u0a20"+
    "\0\u0a50\0\u03c0\0\u0a80\0\u0ab0\0\u0ae0\0\u03c0\0\u03c0\0\u0450"+
    "\0\u0960\0\u0990\0\u0b10\0\u03c0\0\u03c0\0\u0b40\0\u03c0\0\u0b70"+
    "\0\u03c0\0\u03c0\0\u0ba0\0\u03c0\0\u0bd0\0\u0c00\0\u0c30\0\u03c0"+
    "\0\u0c60\0\u0c90\0\u0cc0\0\u0cf0\0\u0d20\0\u0d50\0\u0d80\0\u0720"+
    "\0\u07b0\0\u03c0\0\u07e0\0\u0870\0\u0db0\0\u0de0\0\u03c0\0\u03c0"+
    "\0\u0960\0\u03c0\0\u0990\0\u0e10\0\u03c0\0\u0e40\0\u0e70\0\u0ea0"+
    "\0\u03c0\0\u0ed0\0\u0f00\0\u0f30\0\u0f60\0\u0f90\0\u0fc0\0\u0ff0"+
    "\0\u1020\0\u1050\0\u1080\0\u10b0\0\u10e0\0\u0de0\0\u06f0\0\u1110"+
    "\0\u03c0\0\u1140\0\u03c0\0\u03c0\0\u1170\0\u11a0\0\u11d0\0\u1200"+
    "\0\u1230\0\u1260\0\u1290\0\u03c0\0\u03c0\0\u12c0\0\u12f0\0\u1320"+
    "\0\u1350\0\u1380\0\u13b0\0\u13e0\0\u1410\0\u1440\0\u1470\0\u14a0"+
    "\0\u14d0\0\u1500\0\u1530\0\u1560\0\u1590\0\u03c0\0\u15c0\0\u15f0"+
    "\0\u1620\0\u1650\0\u03c0\0\u1680\0\u16b0\0\u16e0\0\u1710\0\u1740"+
    "\0\u03c0\0\u03c0\0\u03c0\0\u1770\0\u17a0\0\u17d0\0\u1800\0\u1830"+
    "\0\u1860\0\u1890\0\u18c0\0\u18f0\0\u03c0\0\u1920\0\u1950\0\u1980"+
    "\0\u19b0\0\u03c0\0\u19e0\0\u1a10\0\u03c0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[197];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\11\1\1\22\3\1\1\23\1\1\1\24\40\1\1\25"+
    "\1\26\1\27\1\30\1\25\1\31\1\25\1\32\1\25"+
    "\1\33\1\34\2\25\1\35\1\36\1\25\1\37\1\25"+
    "\15\34\5\25\5\34\1\25\6\34\1\40\1\26\1\41"+
    "\1\42\13\40\1\43\1\44\1\40\1\45\2\40\1\46"+
    "\1\47\2\40\1\50\1\40\1\51\1\40\1\52\6\40"+
    "\1\53\4\40\1\54\6\40\1\55\1\26\1\56\1\42"+
    "\5\55\1\57\1\60\5\55\1\61\1\55\15\60\5\55"+
    "\5\60\1\55\6\60\1\62\1\63\1\64\1\65\14\62"+
    "\1\66\37\62\1\67\1\70\1\71\1\72\45\67\1\73"+
    "\6\67\1\55\1\26\1\56\1\42\5\55\1\57\1\74"+
    "\1\75\1\76\2\55\1\77\1\61\1\55\5\74\1\100"+
    "\7\74\1\55\1\101\1\102\2\55\5\74\1\55\6\74"+
    "\1\55\1\26\1\56\1\42\4\55\1\103\1\57\1\60"+
    "\1\104\1\105\3\55\1\61\1\55\10\60\1\106\4\60"+
    "\1\55\1\101\1\102\1\107\1\110\5\60\1\55\6\60"+
    "\1\25\1\26\1\27\1\42\6\25\1\111\7\25\16\111"+
    "\4\25\14\111\1\25\1\26\1\27\1\42\1\25\1\112"+
    "\21\25\1\113\1\25\1\114\24\25\1\115\2\25\1\26"+
    "\1\27\1\42\1\116\1\25\1\117\1\32\1\103\1\120"+
    "\1\34\1\121\1\122\5\25\15\34\5\25\5\34\1\25"+
    "\6\34\1\55\1\26\1\56\1\42\1\116\4\55\1\57"+
    "\1\60\1\104\1\105\3\55\1\61\1\55\15\60\5\55"+
    "\5\60\1\55\6\60\1\55\1\26\1\56\1\42\1\116"+
    "\4\55\1\57\1\60\5\55\1\61\1\55\15\60\1\55"+
    "\1\101\1\102\2\55\5\60\1\55\6\60\1\55\1\26"+
    "\1\56\1\42\54\55\14\123\1\124\1\125\42\123\13\126"+
    "\1\127\1\126\1\125\42\126\6\130\1\117\4\130\1\75"+
    "\1\76\43\130\11\1\1\22\1\0\2\1\1\23\1\1"+
    "\1\24\2\1\15\0\5\1\5\0\1\1\6\0\11\1"+
    "\1\0\3\1\1\23\1\1\1\24\51\1\1\22\3\1"+
    "\1\23\1\1\1\24\1\131\37\1\61\0\1\26\61\0"+
    "\1\42\66\0\1\34\7\0\15\34\5\0\5\34\1\0"+
    "\6\34\10\0\1\34\1\0\1\34\7\0\15\34\5\0"+
    "\5\34\1\0\6\34\21\0\1\132\56\0\1\133\60\0"+
    "\1\134\61\0\1\135\62\0\1\136\63\0\1\137\1\0"+
    "\1\140\46\0\1\141\21\0\1\142\47\0\1\143\44\0"+
    "\1\144\7\0\1\145\72\0\1\146\63\0\1\147\20\0"+
    "\1\60\7\0\15\60\5\0\5\60\1\0\6\60\10\0"+
    "\1\60\1\0\1\60\7\0\15\60\5\0\5\60\1\0"+
    "\6\60\20\150\1\151\40\150\1\63\16\150\1\151\42\150"+
    "\1\65\14\150\1\151\57\150\1\151\1\152\36\150\51\153"+
    "\1\154\7\153\1\70\47\153\1\154\11\153\1\72\45\153"+
    "\1\154\57\153\1\155\6\153\7\0\1\156\1\60\1\0"+
    "\1\74\7\0\15\74\5\0\5\74\1\0\6\74\20\0"+
    "\1\157\77\0\1\160\27\0\1\103\47\0\13\161\1\162"+
    "\44\161\14\163\1\162\43\163\10\0\1\60\1\0\1\60"+
    "\7\0\1\60\1\164\13\60\5\0\5\60\1\0\6\60"+
    "\42\0\1\165\60\0\1\165\26\0\1\111\7\0\16\111"+
    "\4\0\14\111\30\0\1\166\65\0\1\167\66\0\1\170"+
    "\12\0\14\123\2\0\42\123\13\126\1\0\1\126\1\0"+
    "\42\126\6\130\1\0\4\130\2\0\43\130\27\0\1\171"+
    "\21\0\1\172\31\0\1\173\63\0\1\174\61\0\1\175"+
    "\60\0\1\176\56\0\1\177\100\0\1\200\43\0\1\201"+
    "\71\0\1\202\45\0\1\203\41\0\1\204\37\0\20\153"+
    "\1\205\30\153\1\155\6\153\12\0\1\206\7\0\15\206"+
    "\5\0\5\206\1\0\6\206\10\0\1\60\1\0\1\60"+
    "\7\0\5\60\1\207\7\60\5\0\5\60\1\0\6\60"+
    "\35\0\1\210\60\0\1\211\100\0\1\212\51\0\1\213"+
    "\32\0\1\214\63\0\1\214\51\0\1\215\64\0\1\216"+
    "\60\0\1\217\76\0\1\220\45\0\1\221\61\0\1\222"+
    "\55\0\1\223\43\0\1\224\36\0\21\153\1\225\27\153"+
    "\1\154\6\153\53\0\1\226\51\0\1\227\61\0\1\230"+
    "\43\0\1\231\61\0\1\232\50\0\1\233\70\0\1\234"+
    "\42\0\1\235\2\0\1\236\1\237\2\0\1\240\65\0"+
    "\1\241\55\0\1\242\60\0\1\243\71\0\1\244\32\0"+
    "\1\245\104\0\1\246\42\0\1\247\52\0\1\250\54\0"+
    "\1\251\62\0\1\252\65\0\1\253\46\0\1\254\21\0"+
    "\1\255\41\0\1\256\100\0\1\257\40\0\1\260\63\0"+
    "\1\261\44\0\1\214\72\0\1\262\56\0\1\263\46\0"+
    "\1\264\63\0\1\265\62\0\1\266\56\0\1\267\73\0"+
    "\1\270\66\0\1\271\36\0\1\272\50\0\1\253\63\0"+
    "\1\253\56\0\1\273\60\0\1\274\75\0\1\275\66\0"+
    "\1\276\30\0\1\277\64\0\1\300\61\0\1\301\77\0"+
    "\1\302\26\0\1\303\56\0\1\304\104\0\1\253\36\0"+
    "\1\305\52\0\1\253\35\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6720];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\15\0\6\1\2\11\2\1\2\11\2\1\2\11"+
    "\1\1\1\11\14\1\1\11\17\1\2\11\13\1\1\11"+
    "\3\1\2\11\4\1\2\11\1\1\1\11\1\1\2\11"+
    "\1\1\1\11\3\0\1\11\11\0\1\11\4\0\2\11"+
    "\1\0\1\11\1\0\1\1\1\11\3\0\1\11\14\0"+
    "\2\1\1\0\1\11\1\0\2\11\4\0\1\1\2\0"+
    "\2\11\20\0\1\11\4\0\1\11\5\0\3\11\11\0"+
    "\1\11\4\0\1\11\2\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[197];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private Stack<Integer> stack = new Stack<Integer>();

    public void yypushstate(int newState) {
      stack.push(yystate());
      yybegin(newState);
    }

    public void yypopstate() {
      yybegin(stack.pop());
    }

    public void yycleanstates() {
       while(!stack.isEmpty()) {
          yybegin(stack.pop());
       }
    }

	public IElementType checkContent() {
        if (!yytext().toString().equals("")) {
           if (yytext().toString().trim().length() == 0) {
               return TokenType.WHITE_SPACE;
           } else {
               return SilverStripeTypes.CONTENT;
           }
        }
    	return null;
	}


  public SilverStripeLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public SilverStripeLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 128) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 14: 
          { yypushstate(SS_VAR); return SilverStripeTypes.SS_VAR;
          }
        case 50: break;
        case 43: 
          { return SilverStripeTypes.SS_END_KEYWORD;
          }
        case 51: break;
        case 2: 
          { return SilverStripeTypes.SS_STRING;
          }
        case 52: break;
        case 46: 
          { yypushstate(SS_IF_STATEMENT); return SilverStripeTypes.SS_ELSE_IF_KEYWORD;
          }
        case 53: break;
        case 45: 
          { yypushstate(SS_REQUIRE_STATEMENT); return SilverStripeTypes.SS_REQUIRE_KEYWORD;
          }
        case 54: break;
        case 25: 
          { yypushstate(SS_VAR); return SilverStripeTypes.SS_VAR_START_DELIMITER;
          }
        case 55: break;
        case 15: 
          { yypushstate(SS_SINGLE); return SilverStripeTypes.SS_SINGLE_LEFT;
          }
        case 56: break;
        case 47: 
          { yypushstate(SS_BLOCK_VAR); return SilverStripeTypes.SS_SIMPLE_KEYWORD;
          }
        case 57: break;
        case 21: 
          { yypushstate(SS_REQUIRE_CONTENT); return SilverStripeTypes.LEFT_PAREN;
          }
        case 58: break;
        case 18: 
          { return SilverStripeTypes.SS_COMPARISON_OPERATOR;
          }
        case 59: break;
        case 12: 
          { return TokenType.WHITE_SPACE;
          }
        case 60: break;
        case 24: 
          { yypopstate(); return SilverStripeTypes.SS_DOUBLE_RIGHT;
          }
        case 61: break;
        case 4: 
          { if (!stack.isEmpty()) {
		   yypopstate(); yypushback(yylength());
		} else {
		return SilverStripeTypes.CRLF;
	}
          }
        case 62: break;
        case 5: 
          { yypushstate(SS_METHOD_ARGUMENTS); return SilverStripeTypes.LEFT_PAREN;
          }
        case 63: break;
        case 9: 
          { return SilverStripeTypes.SS_VAR_START_DELIMITER;
          }
        case 64: break;
        case 6: 
          { return SilverStripeTypes.DOT;
          }
        case 65: break;
        case 11: 
          { yypushstate(SS_BAD_BLOCK_STATEMENT); yypushback(yylength());
          }
        case 66: break;
        case 23: 
          { yypopstate(); return SilverStripeTypes.RIGHT_PAREN;
          }
        case 67: break;
        case 28: 
          { yycleanstates(); return SilverStripeTypes.SS_BLOCK_END;
          }
        case 68: break;
        case 37: 
          { yypushstate(SS_COMMENT); return SilverStripeTypes.SS_COMMENT_START;
          }
        case 69: break;
        case 7: 
          { return SilverStripeTypes.SS_VAR_START;
          }
        case 70: break;
        case 27: 
          { yypushback(2);
            yypushstate(SS_BLOCK_START);
            IElementType content = checkContent();
            if (content != null) return content;
          }
        case 71: break;
        case 39: 
          { return SilverStripeTypes.SS_ELSE_KEYWORD;
          }
        case 72: break;
        case 30: 
          { yypopstate(); return SilverStripeTypes.SS_BLOCK_END;
          }
        case 73: break;
        case 35: 
          { return SilverStripeTypes.SS_TRANSLATION_IDENTIFIER;
          }
        case 74: break;
        case 26: 
          { yypopstate(); return SilverStripeTypes.SS_SINGLE_RIGHT;
          }
        case 75: break;
        case 32: 
          { yypopstate(); yypushback(2); return SilverStripeTypes.SS_BAD_BLOCK_STATEMENT;
          }
        case 76: break;
        case 17: 
          { return SilverStripeTypes.SS_TRANSLATION_KEYWORD;
          }
        case 77: break;
        case 34: 
          { yypushstate(SS_TRANSLATION);  yypushback(3); return SilverStripeTypes.SS_BLOCK_START;
          }
        case 78: break;
        case 20: 
          { yypushstate(SS_INCLUDE_VARS); return SilverStripeTypes.SS_INCLUDE_FILE;
          }
        case 79: break;
        case 8: 
          { return SilverStripeTypes.SS_VAR;
          }
        case 80: break;
        case 42: 
          { yypushstate(SS_CACHED_STATEMENT); return SilverStripeTypes.SS_CACHED_KEYWORD;
          }
        case 81: break;
        case 38: 
          { yypushstate(SS_BLOCK_VAR); return SilverStripeTypes.SS_START_KEYWORD;
          }
        case 82: break;
        case 10: 
          { yypopstate(); return SilverStripeTypes.SS_VAR_END_DELIMITER;
          }
        case 83: break;
        case 16: 
          { yypushstate(SS_DOUBLE); return SilverStripeTypes.SS_DOUBLE_LEFT;
          }
        case 84: break;
        case 3: 
          { yypopstate(); yypushback(yylength());
          }
        case 85: break;
        case 29: 
          { return SilverStripeTypes.SS_BLOCK_START;
          }
        case 86: break;
        case 13: 
          { return TokenType.BAD_CHARACTER;
/*	if (!stack.isEmpty()) {
	   yypopstate(); yypushback(yylength());
	} else {
		return TokenType.BAD_CHARACTER;
	}*/
          }
        case 87: break;
        case 41: 
          { yypopstate(); yypushback(4); return SilverStripeTypes.COMMENT;
          }
        case 88: break;
        case 44: 
          { yypushstate(SS_INCLUDE_STATEMENT); return SilverStripeTypes.SS_INCLUDE_KEYWORD;
          }
        case 89: break;
        case 31: 
          { yypushstate(SS_IF_STATEMENT); return SilverStripeTypes.SS_IF_KEYWORD;
          }
        case 90: break;
        case 1: 
          { if (yylength() > 0 && yytext().subSequence(yylength() - 1, yylength()).toString().equals("$") ||
            yylength() > 0 && yytext().subSequence(yylength() - 1, yylength()).toString().equals("{") ) {
            yypushback(1);
            yypushstate(SS_VAR);
        }

        // we stray from the Handlebars grammar a bit here since we need our WHITE_SPACE more clearly delineated
        //    and we need to avoid creating extra tokens for empty strings (makes the parser and formatter happier)
        if (!yytext().toString().equals("")) {
           if (yytext().toString().trim().length() == 0) {
               return TokenType.WHITE_SPACE;
           } else {
               return SilverStripeTypes.CONTENT;
           }
        }
          }
        case 91: break;
        case 40: 
          { yypopstate(); return SilverStripeTypes.SS_COMMENT_END;
          }
        case 92: break;
        case 19: 
          { return SilverStripeTypes.NUMBER;
          }
        case 93: break;
        case 48: 
          { return SilverStripeTypes.SS_REQUIRE_THEME_CSS;
          }
        case 94: break;
        case 49: 
          { return SilverStripeTypes.SS_REQUIRE_JS;
          }
        case 95: break;
        case 33: 
          { return SilverStripeTypes.SS_AND_OR_OPERATOR;
          }
        case 96: break;
        case 22: 
          { return SilverStripeTypes.COMMA;
          }
        case 97: break;
        case 36: 
          { return SilverStripeTypes.SS_REQUIRE_CSS;
          }
        case 98: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
