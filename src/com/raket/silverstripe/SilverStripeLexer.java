/* The following code was generated by JFlex 1.4.3 on 2013-03-27 21:13 */

package com.raket.silverstripe;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.raket.silverstripe.psi.SilverStripeTypes;
import com.raket.silverstripe.psi.SilverStripeTokenType;
import com.intellij.psi.TokenType;
import com.intellij.psi.*;
import com.intellij.psi.xml.*;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.util.containers.Stack;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 2013-03-27 21:13 from the specification file
 * <tt>C:/IdeaProjects/idea-silverstripe/src/com/raket/silverstripe/SilverStripe.flex</tt>
 */
class SilverStripeLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int SS_VAR = 2;
  public static final int SS_TRANSLATION = 16;
  public static final int SS_BLOCK_VAR = 8;
  public static final int SS_BLOCK_START = 6;
  public static final int SS_BAD_VAR = 10;
  public static final int SS_BAD_BLOCK_STATEMENT = 12;
  public static final int YYINITIAL = 0;
  public static final int SS_IF_STATEMENT = 18;
  public static final int SS_WITH_DELIMITER = 4;
  public static final int SS_COMMENT = 14;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9, 9
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\1\1\0\1\3\1\2\22\0\1\3\1\4\1\10"+
    "\1\0\1\5\1\16\1\37\1\10\1\7\1\11\3\0\1\46\1\12"+
    "\13\0\1\0\1\0\1\15\1\36\1\17\2\0\32\6\1\0\1\0"+
    "\2\0\1\35\1\0\1\44\1\43\1\27\1\42\1\33\1\32\1\45"+
    "\1\26\1\24\2\6\1\20\1\6\1\30\1\21\1\22\1\6\1\31"+
    "\1\34\1\25\1\41\1\6\1\23\3\6\1\13\1\40\1\14\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\11\0\3\1\1\2\2\3\1\4\1\2\1\5"+
    "\1\2\1\6\2\7\1\10\10\7\1\11\1\2\1\12"+
    "\3\2\2\3\1\4\2\2\2\3\1\4\2\2\2\3"+
    "\1\4\1\2\1\13\2\2\2\14\1\15\2\2\1\16"+
    "\1\17\1\20\1\21\3\0\1\22\10\0\1\23\5\0"+
    "\1\24\1\15\1\0\1\14\1\25\2\0\1\26\16\0"+
    "\1\15\4\0\1\27\1\30\2\0\1\31\3\0\1\32"+
    "\1\33\20\0\1\34\2\0\1\35\1\36\7\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[147];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\47\0\116\0\165\0\234\0\303\0\352\0\u0111"+
    "\0\u0138\0\u015f\0\u0186\0\u01ad\0\u01d4\0\u01fb\0\u01fb\0\u0222"+
    "\0\u0249\0\u0270\0\u01fb\0\u0297\0\u01fb\0\u01fb\0\u0222\0\u02be"+
    "\0\u02e5\0\u030c\0\u0333\0\u035a\0\u0381\0\u03a8\0\u03cf\0\u03f6"+
    "\0\u041d\0\u0444\0\u046b\0\u030c\0\u0492\0\u04b9\0\u04b9\0\u04e0"+
    "\0\u0507\0\u052e\0\u0555\0\u0555\0\u057c\0\u05a3\0\u05ca\0\u05f1"+
    "\0\u05f1\0\u0618\0\u063f\0\u0666\0\u068d\0\u06b4\0\u06db\0\u0702"+
    "\0\u0729\0\u06b4\0\u0750\0\u0777\0\u079e\0\u07c5\0\u07ec\0\u01fb"+
    "\0\u0813\0\u083a\0\u0861\0\u01fb\0\u0888\0\u08af\0\u08d6\0\u08fd"+
    "\0\u0924\0\u094b\0\u04b9\0\u052e\0\u01fb\0\u0555\0\u05ca\0\u0972"+
    "\0\u05f1\0\u0666\0\u01fb\0\u01fb\0\u0999\0\u09c0\0\u01fb\0\u09e7"+
    "\0\u0a0e\0\u01fb\0\u0a35\0\u0a5c\0\u0a83\0\u0aaa\0\u0ad1\0\u0af8"+
    "\0\u0b1f\0\u0b46\0\u0b6d\0\u0b94\0\u0bbb\0\u0be2\0\u0c09\0\u0c30"+
    "\0\u0702\0\u0c57\0\u0c7e\0\u0ca5\0\u0ccc\0\u01fb\0\u01fb\0\u0cf3"+
    "\0\u0d1a\0\u0d41\0\u0d68\0\u0d8f\0\u0db6\0\u01fb\0\u01fb\0\u0ddd"+
    "\0\u0e04\0\u0e2b\0\u0e52\0\u0e79\0\u0ea0\0\u0ec7\0\u0eee\0\u0f15"+
    "\0\u0f3c\0\u0f63\0\u0f8a\0\u0fb1\0\u0fd8\0\u0fff\0\u1026\0\u01fb"+
    "\0\u104d\0\u1074\0\u01fb\0\u01fb\0\u109b\0\u10c2\0\u10e9\0\u1110"+
    "\0\u1137\0\u115e\0\u1185";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[147];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\5\1\1\13\5\1\1\14\1\1\1\15\31\1\1\16"+
    "\1\17\1\20\1\21\1\16\1\22\5\16\1\23\34\16"+
    "\1\17\1\20\1\21\1\16\1\24\6\16\1\25\32\16"+
    "\1\26\1\17\1\27\1\30\11\26\1\31\1\32\1\26"+
    "\1\33\2\26\1\34\1\35\2\26\1\36\3\26\1\37"+
    "\7\26\1\40\3\26\1\16\1\17\1\20\1\41\1\16"+
    "\1\42\1\43\7\16\1\44\1\16\15\43\4\16\5\43"+
    "\1\45\1\16\1\17\1\20\1\21\43\16\1\46\1\47"+
    "\1\50\1\51\12\46\1\52\30\46\1\53\1\54\1\55"+
    "\1\56\42\53\1\57\1\60\1\61\1\62\1\63\12\60"+
    "\1\64\30\60\1\16\1\17\1\20\1\65\1\66\1\67"+
    "\1\70\7\16\1\44\1\16\10\70\1\71\4\70\1\16"+
    "\1\72\1\73\1\74\5\70\1\16\5\1\1\13\1\0"+
    "\4\1\1\14\1\1\1\15\2\1\15\0\4\1\5\0"+
    "\6\1\1\0\5\1\1\14\1\1\1\15\36\1\1\13"+
    "\5\1\1\14\1\1\1\15\1\0\30\1\50\0\1\17"+
    "\50\0\1\21\51\0\1\75\11\0\15\75\4\0\5\75"+
    "\7\0\1\76\11\0\15\76\4\0\5\76\4\0\1\30"+
    "\61\0\1\77\47\0\1\100\50\0\1\101\51\0\1\102"+
    "\52\0\1\103\1\0\1\104\35\0\1\105\45\0\1\106"+
    "\7\0\1\107\62\0\1\110\5\0\1\41\51\0\1\43"+
    "\11\0\15\43\4\0\5\43\7\0\1\43\1\111\2\0"+
    "\1\43\5\0\15\43\4\0\5\43\47\0\1\112\16\113"+
    "\1\114\31\113\1\47\14\113\1\114\33\113\1\51\12\113"+
    "\1\114\46\113\1\114\1\115\27\113\46\116\1\117\1\116"+
    "\1\54\44\116\1\117\3\116\1\56\42\116\1\117\46\116"+
    "\1\120\16\121\1\122\31\121\1\61\14\121\1\122\33\121"+
    "\1\63\12\121\1\122\46\121\1\122\1\123\27\121\3\0"+
    "\1\65\101\0\1\124\16\0\1\70\11\0\15\70\4\0"+
    "\5\70\7\0\1\70\1\125\2\0\1\70\5\0\15\70"+
    "\4\0\5\70\7\0\1\70\1\125\2\0\1\70\5\0"+
    "\1\70\1\126\13\70\4\0\5\70\40\0\1\127\47\0"+
    "\1\127\14\0\1\75\1\130\2\0\1\75\5\0\15\75"+
    "\4\0\5\75\7\0\1\76\1\131\2\0\1\76\5\0"+
    "\15\76\4\0\5\76\26\0\1\132\20\0\1\133\21\0"+
    "\1\134\52\0\1\135\50\0\1\136\47\0\1\137\52\0"+
    "\1\140\54\0\1\141\40\0\1\142\20\0\1\143\1\0"+
    "\1\144\7\0\15\143\4\0\5\143\17\0\1\145\30\0"+
    "\16\116\1\146\27\116\1\120\6\0\1\147\1\0\1\150"+
    "\7\0\15\147\4\0\5\147\7\0\1\70\1\125\2\0"+
    "\1\70\5\0\5\70\1\151\7\70\4\0\5\70\7\0"+
    "\1\152\1\0\1\153\7\0\15\152\4\0\5\152\7\0"+
    "\1\154\1\0\1\155\7\0\15\154\4\0\5\154\47\0"+
    "\1\156\22\0\1\157\52\0\1\157\40\0\1\160\53\0"+
    "\1\161\54\0\1\162\50\0\1\163\44\0\1\164\21\0"+
    "\1\143\1\0\1\165\1\43\6\0\15\143\4\0\5\143"+
    "\7\0\1\143\11\0\15\143\4\0\5\143\20\0\1\166"+
    "\27\0\17\116\1\167\26\116\1\117\6\0\1\147\1\0"+
    "\1\170\1\70\6\0\15\147\4\0\5\147\7\0\1\147"+
    "\11\0\15\147\4\0\5\147\7\0\1\152\1\0\1\171"+
    "\1\75\6\0\15\152\4\0\5\152\7\0\1\152\11\0"+
    "\15\152\4\0\5\152\7\0\1\154\1\0\1\172\1\76"+
    "\6\0\15\154\4\0\5\154\7\0\1\154\11\0\15\154"+
    "\4\0\5\154\42\0\1\173\36\0\1\174\52\0\1\175"+
    "\31\0\1\176\2\0\1\177\1\200\2\0\1\201\54\0"+
    "\1\202\22\0\1\43\46\0\1\70\46\0\1\75\46\0"+
    "\1\76\77\0\1\203\25\0\1\204\51\0\1\205\43\0"+
    "\1\206\51\0\1\207\54\0\1\210\35\0\1\211\52\0"+
    "\1\212\54\0\1\213\33\0\1\157\60\0\1\214\35\0"+
    "\1\215\52\0\1\216\51\0\1\217\62\0\1\220\24\0"+
    "\1\210\52\0\1\210\45\0\1\221\66\0\1\213\32\0"+
    "\1\222\36\0\1\223\45\0\1\210\26\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4524];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\11\0\3\1\2\11\3\1\1\11\1\1\2\11"+
    "\51\1\1\11\3\0\1\11\10\0\1\11\5\0\2\11"+
    "\1\0\1\1\1\11\2\0\1\11\16\0\1\1\4\0"+
    "\2\11\2\0\1\1\3\0\2\11\20\0\1\11\2\0"+
    "\2\11\7\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[147];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private Stack<Integer> stack = new Stack<Integer>();

    public void yypushState(int newState) {
      stack.push(yystate());
      yybegin(newState);
    }

 	public IElementType checkVariable(IElementType success, IElementType fail) {
        String matchedVar = yytext().toString();
        if (matchedVar.matches("(\\$[a-zA-Z]+)((\\((\\\"(?=[a-zA-Z]*\\\")|\\'(?=[a-zA-Z]*\\')|[a-zA-Z](?=[a-zA-Z]+))[a-zA-Z\\\"\\']+\\))|\\.[a-zA-Z]+)*")) {
           return success;
        }
        else {
           return fail;
        }
 	}

  	public IElementType checkBlockVariable(IElementType success, IElementType fail) {
        String matchedVar = yytext().toString();
        if (matchedVar.matches("(\\$?[a-zA-Z]+)((\\((\\\"(?=[a-zA-Z]*\\\")|\\'(?=[a-zA-Z]*\\')|[a-zA-Z](?=[a-zA-Z]+))[a-zA-Z\\\"\\']+\\))|\\.[a-zA-Z]+)*")) {
           return success;
        }
        else {
           return fail;
        }
 	}

    public void yypopState() {
      yybegin(stack.pop());
    }



  SilverStripeLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  SilverStripeLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 120) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 17: 
          { yybegin(YYINITIAL); return SilverStripeTypes.SS_BLOCK_END;
          }
        case 31: break;
        case 6: 
          { yybegin(YYINITIAL); return SilverStripeTypes.SS_VAR_END_DELIMITER;
          }
        case 32: break;
        case 14: 
          { yybegin(YYINITIAL); return checkVariable(SilverStripeTypes.SS_VAR, SilverStripeTypes.SS_BAD_VAR);
          }
        case 33: break;
        case 22: 
          { yybegin(SS_TRANSLATION); return SilverStripeTypes.SS_BLOCK_START;
          }
        case 34: break;
        case 23: 
          { yybegin(SS_COMMENT); return SilverStripeTypes.SS_COMMENT_START;
          }
        case 35: break;
        case 2: 
          { return TokenType.BAD_CHARACTER;
          }
        case 36: break;
        case 26: 
          { yybegin(YYINITIAL); return SilverStripeTypes.SS_COMMENT_END;
          }
        case 37: break;
        case 1: 
          { if (yylength() > 0 && yytext().subSequence(yylength() - 1, yylength()).toString().equals("<")) {
            yypushback(1);
            yypushState(SS_BLOCK_START);
        }
        if (yylength() > 0 && yytext().subSequence(yylength() - 1, yylength()).toString().equals("$") ||
            yylength() > 0 && yytext().subSequence(yylength() - 1, yylength()).toString().equals("{") ) {
            yypushback(1);
            yybegin(SS_VAR);
        }

        // we stray from the Handlebars grammar a bit here since we need our WHITE_SPACE more clearly delineated
        //    and we need to avoid creating extra tokens for empty strings (makes the parser and formatter happier)
        if (!yytext().toString().equals("")) {
           if (yytext().toString().trim().length() == 0) {
               return TokenType.WHITE_SPACE;
           } else {
               return SilverStripeTypes.CONTENT;
           }
        }
          }
        case 38: break;
        case 11: 
          { yybegin(SS_IF_STATEMENT); return TokenType.WHITE_SPACE;
          }
        case 39: break;
        case 9: 
          { yybegin(SS_BLOCK_VAR); return TokenType.WHITE_SPACE;
          }
        case 40: break;
        case 27: 
          { yybegin(SS_BLOCK_VAR); yypushback(4); return SilverStripeTypes.COMMENT;
          }
        case 41: break;
        case 18: 
          { yybegin(SS_IF_STATEMENT); return SilverStripeTypes.SS_IF_KEYWORD;
          }
        case 42: break;
        case 8: 
          { yybegin(SS_BLOCK_START); return TokenType.WHITE_SPACE;
          }
        case 43: break;
        case 28: 
          { yybegin(SS_BLOCK_START); return SilverStripeTypes.SS_END_KEYWORD;
          }
        case 44: break;
        case 29: 
          { yybegin(SS_BLOCK_VAR); return SilverStripeTypes.SS_SIMPLE_KEYWORD;
          }
        case 45: break;
        case 24: 
          { yybegin(SS_BLOCK_VAR); return SilverStripeTypes.SS_START_KEYWORD;
          }
        case 46: break;
        case 21: 
          { yybegin(SS_IF_STATEMENT); return SilverStripeTypes.SS_AND_OR_OPERATOR;
          }
        case 47: break;
        case 3: 
          { yybegin(YYINITIAL); return SilverStripeTypes.CRLF;
          }
        case 48: break;
        case 25: 
          { yybegin(SS_BLOCK_START); return SilverStripeTypes.SS_ELSE_KEYWORD;
          }
        case 49: break;
        case 19: 
          { yybegin(SS_BLOCK_VAR); yypushback(2); return SilverStripeTypes.SS_BAD_BLOCK_STATEMENT;
          }
        case 50: break;
        case 12: 
          { yybegin(SS_IF_STATEMENT); return checkBlockVariable(SilverStripeTypes.SS_BLOCK_VAR, SilverStripeTypes.SS_BAD_VAR);
          }
        case 51: break;
        case 30: 
          { yybegin(SS_IF_STATEMENT); return SilverStripeTypes.SS_ELSE_IF_KEYWORD;
          }
        case 52: break;
        case 16: 
          { yybegin(SS_BLOCK_START); return SilverStripeTypes.SS_BLOCK_START;
          }
        case 53: break;
        case 5: 
          { yybegin(SS_WITH_DELIMITER); return SilverStripeTypes.SS_VAR_START_DELIMITER;
          }
        case 54: break;
        case 4: 
          { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
          }
        case 55: break;
        case 15: 
          { yybegin(SS_WITH_DELIMITER); return checkVariable(SilverStripeTypes.SS_VAR, SilverStripeTypes.SS_BAD_VAR);
          }
        case 56: break;
        case 20: 
          { yybegin(SS_BLOCK_START); yypushback(2); return SilverStripeTypes.SS_TRANSLATION_STATEMENT;
          }
        case 57: break;
        case 10: 
          { yybegin(SS_BLOCK_VAR); return checkBlockVariable(SilverStripeTypes.SS_BLOCK_VAR, SilverStripeTypes.SS_BAD_VAR);
          }
        case 58: break;
        case 7: 
          { yybegin(SS_BAD_BLOCK_STATEMENT); yypushback(1);
          }
        case 59: break;
        case 13: 
          { yybegin(SS_IF_STATEMENT); return SilverStripeTypes.SS_COMPARISON_OPERATOR;
          }
        case 60: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
